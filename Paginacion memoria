{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/12valencia/12valencia/blob/main/Paginacion%20memoria\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class Pagina:\n",
        "    def __init__(self, numero, contenido):\n",
        "        self.numero = numero\n",
        "        self.contenido = contenido\n",
        "\n",
        "class Proceso:\n",
        "    def __init__(self, id_proceso, tamano):\n",
        "        self.id_proceso = id_proceso\n",
        "        self.tamano = tamano\n",
        "        self.paginas = []\n",
        "\n",
        "class MemoriaVirtual:\n",
        "    def __init__(self, tamano_memoria, tamano_pagina):\n",
        "        self.tamano_memoria = tamano_memoria\n",
        "        self.tamano_pagina = tamano_pagina\n",
        "        self.memoria = [None] * (tamano_memoria // tamano_pagina)\n",
        "        self.procesos_activos = []\n",
        "        self.procesos_en_espera = []\n",
        "\n",
        "    def agregar_proceso(self, id_proceso, tamano):\n",
        "        proceso = Proceso(id_proceso, tamano)\n",
        "        self.procesos_en_espera.append(proceso)\n",
        "        print(f\"Proceso {id_proceso} agregado a la cola de espera.\")\n",
        "\n",
        "    def mostrar_tabla_procesos(self):\n",
        "        print(\"\\nTabla de procesos activos:\")\n",
        "        for proceso in self.procesos_activos:\n",
        "            print(f\"Proceso {proceso.id_proceso} - Tamaño: {proceso.tamano} bytes\")\n",
        "\n",
        "        print(\"\\nTabla de procesos en espera:\")\n",
        "        for proceso in self.procesos_en_espera:\n",
        "            print(f\"Proceso {proceso.id_proceso} - Tamaño: {proceso.tamano} bytes\")\n",
        "\n",
        "    def liberar_proceso(self, id_proceso):\n",
        "        proceso_a_liberar = None\n",
        "        for proceso in self.procesos_activos:\n",
        "            if proceso.id_proceso == id_proceso:\n",
        "                proceso_a_liberar = proceso\n",
        "                break\n",
        "\n",
        "        if proceso_a_liberar:\n",
        "            for pagina in proceso_a_liberar.paginas:\n",
        "                self.memoria[pagina.numero] = None\n",
        "            self.procesos_activos.remove(proceso_a_liberar)\n",
        "            print(f\"Proceso {id_proceso} liberado de la memoria.\")\n",
        "            self.iniciar_proceso_en_espera()\n",
        "        else:\n",
        "            print(f\"Proceso {id_proceso} no encontrado en la memoria.\")\n",
        "\n",
        "    def iniciar_proceso_en_espera(self):\n",
        "        if self.procesos_en_espera:\n",
        "            proceso_a_iniciar = self.procesos_en_espera.pop(0)\n",
        "            if self.asignar_paginas(proceso_a_iniciar):\n",
        "                self.procesos_activos.append(proceso_a_iniciar)\n",
        "                print(f\"Proceso {proceso_a_iniciar.id_proceso} iniciado en la memoria.\")\n",
        "            else:\n",
        "                print(f\"No hay suficiente espacio en la memoria para el proceso {proceso_a_iniciar.id_proceso}.\")\n",
        "\n",
        "    def asignar_paginas(self, proceso):\n",
        "        paginas_necesarias = proceso.tamano // self.tamano_pagina\n",
        "        if proceso.tamano % self.tamano_pagina != 0:\n",
        "            paginas_necesarias += 1\n",
        "\n",
        "        espacio_disponible = self.memoria.count(None)\n",
        "        if espacio_disponible >= paginas_necesarias:\n",
        "            for numero_pagina in range(len(self.memoria)):\n",
        "                if espacio_disponible == 0:\n",
        "                    break\n",
        "                if self.memoria[numero_pagina] is None:\n",
        "                    pagina = Pagina(numero_pagina, f\"Contenido de la página {numero_pagina} del proceso {proceso.id_proceso}\")\n",
        "                    proceso.paginas.append(pagina)\n",
        "                    self.memoria[numero_pagina] = proceso.id_proceso\n",
        "                    espacio_disponible -= 1\n",
        "            return True\n",
        "        else:\n",
        "            return False\n",
        "\n",
        "def main():\n",
        "    tamano_memoria = 1024\n",
        "    tamano_pagina = 64\n",
        "    memoria_virtual = MemoriaVirtual(tamano_memoria, tamano_pagina)\n",
        "\n",
        "    while True:\n",
        "        print(\"\\nOperaciones disponibles:\")\n",
        "        print(\"1. Ingrese un proceso\")\n",
        "        print(\"2. Mostrar tabla de procesos activos\")\n",
        "        print(\"3. Mostrar tabla de procesos en espera\")\n",
        "        print(\"4. Liberar proceso activo\")\n",
        "        print(\"5. Iniciar proceso en espera\")\n",
        "        print(\"6. Salir\")\n",
        "\n",
        "        opcion = input(\"Selecciona una opción: \")\n",
        "\n",
        "        if opcion == \"1\":\n",
        "            id_proceso = input(\"Ingrese el ID del proceso: \")\n",
        "            tamano = int(input(\"Ingrese el tamaño del proceso en bytes: \"))\n",
        "            memoria_virtual.agregar_proceso(id_proceso, tamano)\n",
        "        elif opcion == \"2\":\n",
        "            memoria_virtual.mostrar_tabla_procesos()\n",
        "        elif opcion == \"3\":\n",
        "            memoria_virtual.mostrar_tabla_procesos()\n",
        "        elif opcion == \"4\":\n",
        "            id_proceso = input(\"Ingrese el ID del proceso a liberar: \")\n",
        "            memoria_virtual.liberar_proceso(id_proceso)\n",
        "        elif opcion == \"5\":\n",
        "            memoria_virtual.iniciar_proceso_en_espera()\n",
        "        elif opcion == \"6\":\n",
        "            break\n",
        "        else:\n",
        "            print(\"Opción no válida. Intente nuevamente.\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ],
      "metadata": {
        "id": "Z6gtNnJcnzC2",
        "outputId": "17ef14ed-47b7-4d14-b436-7d4dc6bc92dd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Operaciones disponibles:\n",
            "1. Ingrese un proceso\n",
            "2. Mostrar tabla de procesos activos\n",
            "3. Mostrar tabla de procesos en espera\n",
            "4. Liberar proceso activo\n",
            "5. Iniciar proceso en espera\n",
            "6. Salir\n",
            "Selecciona una opción: A\n",
            "Opción no válida. Intente nuevamente.\n",
            "\n",
            "Operaciones disponibles:\n",
            "1. Ingrese un proceso\n",
            "2. Mostrar tabla de procesos activos\n",
            "3. Mostrar tabla de procesos en espera\n",
            "4. Liberar proceso activo\n",
            "5. Iniciar proceso en espera\n",
            "6. Salir\n",
            "Selecciona una opción: 1\n",
            "Ingrese el ID del proceso: A\n",
            "Ingrese el tamaño del proceso en bytes: 4\n",
            "Proceso A agregado a la cola de espera.\n",
            "\n",
            "Operaciones disponibles:\n",
            "1. Ingrese un proceso\n",
            "2. Mostrar tabla de procesos activos\n",
            "3. Mostrar tabla de procesos en espera\n",
            "4. Liberar proceso activo\n",
            "5. Iniciar proceso en espera\n",
            "6. Salir\n",
            "Selecciona una opción: 1\n",
            "Ingrese el ID del proceso: B\n",
            "Ingrese el tamaño del proceso en bytes: 7\n",
            "Proceso B agregado a la cola de espera.\n",
            "\n",
            "Operaciones disponibles:\n",
            "1. Ingrese un proceso\n",
            "2. Mostrar tabla de procesos activos\n",
            "3. Mostrar tabla de procesos en espera\n",
            "4. Liberar proceso activo\n",
            "5. Iniciar proceso en espera\n",
            "6. Salir\n",
            "Selecciona una opción: 1\n",
            "Ingrese el ID del proceso: C\n",
            "Ingrese el tamaño del proceso en bytes: 32\n",
            "Proceso C agregado a la cola de espera.\n",
            "\n",
            "Operaciones disponibles:\n",
            "1. Ingrese un proceso\n",
            "2. Mostrar tabla de procesos activos\n",
            "3. Mostrar tabla de procesos en espera\n",
            "4. Liberar proceso activo\n",
            "5. Iniciar proceso en espera\n",
            "6. Salir\n",
            "Selecciona una opción: 2\n",
            "\n",
            "Tabla de procesos activos:\n",
            "\n",
            "Tabla de procesos en espera:\n",
            "Proceso A - Tamaño: 4 bytes\n",
            "Proceso B - Tamaño: 7 bytes\n",
            "Proceso C - Tamaño: 32 bytes\n",
            "\n",
            "Operaciones disponibles:\n",
            "1. Ingrese un proceso\n",
            "2. Mostrar tabla de procesos activos\n",
            "3. Mostrar tabla de procesos en espera\n",
            "4. Liberar proceso activo\n",
            "5. Iniciar proceso en espera\n",
            "6. Salir\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "Te damos la bienvenida a Colaboratory",
      "toc_visible": true,
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}